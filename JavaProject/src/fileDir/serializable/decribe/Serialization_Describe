 [ 직렬화(Serialization) ]
 -> 대표적으로 직렬화는 객체를 바이트 스트림으로 변환하는 과정
   
   1. < 객체는 메모리 상에 존재 >
   -> 프로그램이 실행되는 동안, 객체는 컴퓨터(RAM)에 특정한 구조로 저장
      이 구조는 객체를 구성하는 데이터(필드)와 객체가 수행할 수 있는 동작(메서드)에 대한 정보를 담고 있습니다.
      
   2. < 메모리 상의 객체는 영구적이지 않음 >
   -> 프로그램이 종료되면 메모리(휘발성)에 있던 객체들은 사라집니다. 즉,
      객체의 상태를 유지하려면 다른 형태로 저장해야 합니다.
      
   3. < 바이트 스트림은 데이터의 연속 >
   -> 바이트 스트림은 0과 1로 이루어진 데이터의 연속적인 흐름입니다.
      파일에 저장하거나 네트워크를 통해 전송할 수 있는 형태
      
   4. < 직렬화는 객체의 구조를 바이트 스트림으로 변환 >
   -> 객체를 직렬화하면, 객체를 구성하는 데이터(필드 값)와 객체의 타입 정보 등이
      바이트 스트림 형태로 변환, 이렇게 변환된 바이트 스트림은 파일에 저장하거나,
      네트워크를 통해 다른 컴퓨터로 전송할 수 있다.
  
      
[ 직렬화의 핵심 ]
 ㅇ < 객체를 데이터 형태로 변환 >
 -> 메모리상의 복잡한 객체 구조를 파일 저장이나 네트워크 전송에 적합한 데이터 형태로 변환
 
 ㅇ < 객체의 상태 보존 >
 -> 객체가 가지고 있는 데이터(필드 값)를 그대로 유지하면서 저장하거나 전송할 수 있다.
 
 ㅇ < 객체 재구성 가능 >
 -> 직렬화된 바이트 스트림을 다시 객체로 복원할 수 있다.
 
 
[ 직렬화의 비유 ]
 ㅇ < 책을 디지털 파일로 변환 >
 -> 책(객체)을 스캔하여 PDF 파일(바이트 스트림)로 만드는 것과 비슷합니다.
    PDF 파일은 파일로 저장하거나 네트워크를 통해 전송할 수 있으며,
    다시 PDF 리더를 통해 책의 내용을 볼 수 있다.


[ 직렬화의 목적 ]
 ㅇ < 객체 영구 저장 >
 -> 객체를 파일에 저장하여 프로그램 종료 후에도 객체의 상태를 유지
 
 ㅇ < 객체 네트워크 전송 >
 -> 객체를 네트워크를 통해 다른 시스템으로 전송하여 데이터를 교환한다.
    ( 예: 원격 메서드 호출, 분산 시스템 )
    
 ㅇ < 객체 상태 저장 및 복원 >
 -> 어플리케이션의 세션 정보, 사용자 설정 등을 저장하고 다시 로딩할 때 사용
 
 
[ 직렬화의 중요한 특징 ]
 ㅇ < Serializable 인터페이스 >
 -> 직렬화가 가능한 클래스임을 명시하기 위해 java.io.Serializable 인터페이스를 구현해야 함
 
 ㅇ < ObjectOutpoutStream >
 -> 객체를 바이트 스트림으로 변환하는 데 사용
 
 ㅇ < ObjectInputStream >
 -> 바이트 스트림을 객체로 변환 하는 데 사용
 
 ㅇ < transient 키워드 >
 -> 특정 필드를 직렬화 대상에서 제외할 수 있다.
 
 ㅇ < serialVersionUID >
 -> 클래스 버전 관리를 위해 사용
 
 
[ 직렬화 정리 ]
 직렬화는 메모리상의 객체를 바이트 스트림이라는 데이터 형태로 변환하여,
 영구 저장하거나 네트워크 전송을 가능하게 하는 기술
 
 객체의 상태를 그대로 유지하면서 이동시키거나 저장할수 있도록 도와준다.
 
 이러한 과정을 통해 프로그램의 지속성을 높이고, 분산 환경에서 데이터를 공유하는 데 중요한 역할을 한다.
 