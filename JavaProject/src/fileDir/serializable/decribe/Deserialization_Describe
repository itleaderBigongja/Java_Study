
역직렬화(Deserialization)란 무엇인가?
-> 역직렬화는 직렬화의 반대 과정으로, 바이트 스트림을 다시 객체로 변환하는 과정

1. < 바이트 스트림은 데이터의 연속 >
-> 직렬화 과정을 거쳐 생성된 바이트 스트림은 0과 1로 이루어진 연속적인 데이터 흐름이다.
   이 바이트 스트림은 파일에 저장되어 있거나, 네트워크를 통해 전송되어 수신되었을 수 있다.
   
2. < 객체는 메모리 상의 데이터 구조 >
-> 객체는 프로그램 실행 중에 메모리에 생성되고 관리되는 데이터 구조이다.
   객체는 데이터(필드 = 변수)와 동작(메서드)을 포함한다.
   
3. < 역직렬화는 바이트 스트림을 객체로 재구성 >
-> 역직렬화는 바이트 스트림을 읽어 들여, 그 안에 저장된 객체의 타입 정보와 데이터(필드 값)를 기반으로
   메모리에 객체를 재구성 한다. 즉, 직렬화되기 전의 객체 상태를 복원하는 과정이다.
   
4. < 객체 재구성 후 사용 >
-> 역직렬화된 객체는 메모리에 존재하며, 프로그램에서 필요에 따라 사용할 수 있다.


[ 역직렬화의 핵심 ]
1. < 바이트 스트림을 객체로 복원 >
-> 직렬화된 데이터를 다시 프로그램에서 사용할 수 있는 객체 형태로 변환

2. < 객체 상태 복원 >
-> 직렬화되기 전의 객체가 가지고 있던 데이터(필드 값)를 그대로 복원한다.

3. < 직렬화 과정의 반대 >
-> 직렬화와 역직렬화는 서로 반대되는 과정이며, 함께 사용되어 객체의 영속성 및 이동성을 제공


[ 역직렬화의 비유 ]
   < 디지털 파일을 책으로 복원 >
-> PDF파일(바이트 스트림)을 PDF 리더를 통해 책(객체)의 내용으로 다시 보는 것과 비슷하다.


[ 역직렬화의 목적 ]
1. < 저장된 객체 로딩 >
-> 파일에 저장된 직렬화된 객체를 읽어와 프로그램에서 다시 사용

2. < 네트워크로 전송된 객체 수신 >
-> 네트워크를 통해 받은 직렬화된 데이터를 다시 객체로 변환하여 사용

3. < 객체 상태 복원 >
-> 어플리케이션을 재시작하거나 세션을 복원할 때 저장된 객체 상태를 로딩하여 사용


[ 역직렬화의 중요한 특징 ]
1. < ObjectInputStream >
-> 바이트 스트림을 읽어 객체를 복원하는 데 사용

2. < Serializable 인터페이스 >
-> 역직렬화하려는 데이터가 Serializable 인터페이스를 구현한 클래스의 객체여야 한다.
   ( 직렬화 할 때, Serializable을 구현해야 역직렬화 가능 )
   
3. < 클래스 구조 일치 >
-> 역직렬화 시에는 직렬화할 때 사용했던 클래스와 동일한 클래스구조가 필요
   ( 필드 추가/삭제 시 호환성 문제 발생 가능 )
   
4. < 보안 위험 >
-> 신뢰할 수 없는 소스에서 온 바이트 스트림을 역직렬화할 경우, 보안 위험이 발생할 수 있다.


[ 직렬화와 역직렬화 관계 ]
직렬화와 역직렬화는 마치 동전의 양면과 같다. 지기렬화가 객체를 데이터 형태로 변환하는 과정이라면,
역직렬화는 그 데이티를 다시 객체 형태로 변환하는 과정이다.
이 두 과정이 함께 사용되어 객체의 영속성과 이동성을 보장한다.


[ 역직렬화 정리 ]
역직렬화는 직렬화된 바이트 스트림을 다시 메모리상의 객체로 복원하는 과정이다.
이는 객체를 저장하거나 전송한 후 다시 사용 가능하게 만들어주는 중요한 기술이다.
역직렬화를 통해 프로그램은 데이터를 지속적으로 사용하거나 다른 시스템과 데이터를 교환할 수 있다.
