
스레드란(Thread)란 무엇일까요?
스레드는 프로그램 실행의 가장 작은 단위입니다. 하나의 프로세스(실행 중인 프로그램)는 하나 이상의 스레드로 구성될 수 있습니다.

ㅇ < 프로세스 vs 스레드 >
[ 프로세스 ] -> 운영체제로부터 자원(메모리, CPU 등)을 할당받아 실행되는 독립적인 실행 단위이다.
[ 스레드 ]  -> 프로세스 내에서 실행되며 프로세스가 할당받은 자원을 공유한다.

ㅇ < 싱글 스레드 vs 멀티 스레드 >
싱글 스레드 -> 하나의 프로세스 내에서 하나의 스레드만 실행되는 방식이다.
            작업이 순차적으로 처리되어 간단하지만, 동시에 여러 작업을 처리하기에는 비효율적이다.
            
멀티 스레드 -> 하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 방식이다.
            여러 작업을 병렬적으로 처리할 수 있어 프로그램의 응답성을 높이고 자원 활용도를 향상시킬 수 있다.
            
ㅇ < 멀티 스레드의 장점 >
[ 응답성 향상 ] -> UI 응답을 유지하면서 백그라운드 작업을 처리할 수 있다.
[ 자원 효율성 ] -> 여러 스레드가 프로세스의 자원을 공유하여 효율적인 자원 활용이 가능하다.
[ 처리량 증가 ] -> 여러 작업을 병렬로 처리하여 전체적인 처리량을 늘릴 수 있다.

ㅇ < 멀티 스레드의 주의점 >
[ 동기화 문제 ] -> 여러 스레드가 공유 자원에 동시에 접근할 때, 발생할 수 있는 문제(데이터 불일치, 교착 상태 등)를 해결해야 한다.
[ 복잡성 증가 ] -> 스레드 관리가 복잡해지므로 시중한 설계와 구현이 필요하다.
[ 디버깅 어려움 ] -> 스레드 관련 문제(레이스 컨디션, 데드락 등)는 디버깅이 어려울 수 있다.

ㅇ < Java에서 스레드를 생성하는 두 가지 주요 방법 >
[ Thread 클래스 상속 ] -> Thread 클래스를 상속하여 run() 메서드를 재정의하여 스레드를 구현한다.
[ Runnable 인터페이스 구현 ] -> Runnable 인터페이스를 구현하여 run() 메서드를 구현하고,
                            이를 Thread 객체에 전달하여 스레드를 생성한다.
                            
ㅇ < Runnable 인터페이스를 사용하는 이유 >
[ 다중 상속 문제 회피 ] -> Java는 다중 상속을 지원하지 않으므로, Thread 클래스를 상속 받으면 다른 클래스를 상속받을 수 없다.
                       Runnable 인터페이스를 구현하여 다른 클래스를 상속 받으면서도 스레드를 사용할 수 있다.
                       
[ 코드 재사용성 향상 ] -> 스레드 실행 로직을 Runnable 객체로 분리하여 코드 재사용성을 높일 수 있다.
[ 객체 지향적 설계 ] -> Runnable 객체를 독립적으로 관리하고, 재사용할 수 있어 객체 지향적인 프로그래밍을 가능하게 한다.
