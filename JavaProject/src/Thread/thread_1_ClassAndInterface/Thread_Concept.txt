
스레드란(Thread)란 무엇일까요?
스레드는 프로그램 실행의 가장 작은 단위이다. 하나의 프로세스(실행 중인 프로그램)는 하나 이상의 스레드로 구성될 수 있다.

스레드 풀( Thread Pool )은 무엇일까?
스레드 풀은 하나의 주 스레드에서 여러 개의 서브 스레드를 만들 수 있도록 하는 인스턴스이다.

< ThreadPool 생성 >
ExecutorService executor = Executors.newFixedThreadPool(2);
위 와 같은 소스 코드를 보면 하나의 주 스레드에 2개의 서브 스레드를 만들도록 Thread Pool을 만든것이다.

이 2개의 서브 스레드는 주 스레드가 일 처리를 할 때, 동시적으로 작업을 수행하기 위해 비동기적으로 작업을 진행할 수 있도록
스레드를 생성한 것이다. 예를 들어서 아래와 같은 작업을 할 때, 스레드 풀이 필요하다.


< Thread Pool을 사용하지 않을 경우 >
클라이언트 1과 2가 있다. 두 개의 클라이언트는 WEB서버에 연결 Request를 보냈다. 그렇다면 WEB서버의 [ 워커 스레드 ]는 
첫 번째 Request(요청)을 수행하여 다시 클라이언트1에게 Response(응답) 작업을 보내준다. 이 때, 스레드 풀이 없다면 
클라이언트1이 응답을 받아 작업이 완료될 때까지 클라이언트2의 Request(요청)을 Waiting(대기) 상태가 되며, 
클라이언트1 WEB서버의 응답을 받았을 때, Waiting 상태에서 Runnable 상태로 바뀌어 작업이 진행이 된다.

< Thread Pool을 사용할 경우 >
클라이언트 1과 2가 있다. 두 개의 클라이언트는 WEB서버에 연결 Request를 보냈다. 그렇다면 WEB서버의 [ 워커 스레드 ]는
첫 번째 Request(요청)을 수행하여 다시 클라이언트1에게 Response(응답) 작업을 보내준다. 이번엔 스레드 풀을 2개를 생성하였기 때문에
클라이언트2도 WEB서버의 [ 워커 스레드 ]에서 대기하지 않고, 작업을 동시에 진행할 수 있다. 그렇기 때문에 
클라이언트1과 클라이언트2의 수행 결과를 동시에 받을 수 있다.


< Thread를 사용 해야할 때 >
동시에 여러 작업을 진행을 해야할 때 사용한다. 동시에 작업을 진행할 경우는 비동기 작업을 진행하는데, 위와 같은 예시를 볼 수 있고,
또 다른 예시로는 하나의 작업을 진행하고 있을 때, 다른 작업을 해야하는 경우가 있다. 이 때, 같은 스레드에서 작업을 하는게 아닌,
별도의 스레드를 하나 더 만들어서 다른 스레드에서 독립적으로 작업이 진행될 수 있도록 하는게 성능면에서 좋다.
예시 : 스레드 1번은 클라이언트가 요청한 내용을 수행한다.
      스레드 2번은 수행한 내용에 대한 로깅 작업을 진행한다.
위 처럼 동시에 같은 작업을 해서 결과를 얻어야할 때와 작업을 하는 도중 별도로 다른 작업이 필요할 때, 사용하는 것이 올바른 스레드 사용 방법이다.


ㅇ < 프로세스 vs 스레드 >
[ 프로세스 ] -> 운영체제로부터 자원(메모리, CPU 등)을 할당받아 실행되는 독립적인 실행 단위이다.
[ 스레드 ]  -> 프로세스 내에서 실행되며 프로세스가 할당받은 자원을 공유한다.

ㅇ < 싱글 스레드 vs 멀티 스레드 >
싱글 스레드 -> 하나의 프로세스 내에서 하나의 스레드만 실행되는 방식이다.
            작업이 순차적으로 처리되어 간단하지만, 동시에 여러 작업을 처리하기에는 비효율적이다.
            
멀티 스레드 -> 하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 방식이다.
            여러 작업을 병렬적으로 처리할 수 있어 프로그램의 응답성을 높이고 자원 활용도를 향상시킬 수 있다.
            
ㅇ < 멀티 스레드의 장점 >
[ 응답성 향상 ] -> UI 응답을 유지하면서 백그라운드 작업을 처리할 수 있다.
[ 자원 효율성 ] -> 여러 스레드가 프로세스의 자원을 공유하여 효율적인 자원 활용이 가능하다.
[ 처리량 증가 ] -> 여러 작업을 병렬로 처리하여 전체적인 처리량을 늘릴 수 있다.

ㅇ < 멀티 스레드의 주의점 >
[ 동기화 문제 ] -> 여러 스레드가 공유 자원에 동시에 접근할 때, 발생할 수 있는 문제(데이터 불일치, 교착 상태 등)를 해결해야 한다.
[ 복잡성 증가 ] -> 스레드 관리가 복잡해지므로 시중한 설계와 구현이 필요하다.
[ 디버깅 어려움 ] -> 스레드 관련 문제(레이스 컨디션, 데드락 등)는 디버깅이 어려울 수 있다.

ㅇ < Java에서 스레드를 생성하는 두 가지 주요 방법 >
[ Thread 클래스 상속 ] -> Thread 클래스를 상속하여 run() 메서드를 재정의하여 스레드를 구현한다.
[ Runnable 인터페이스 구현 ] -> Runnable 인터페이스를 구현하여 run() 메서드를 구현하고,
                            이를 Thread 객체에 전달하여 스레드를 생성한다.
                            
ㅇ < Runnable 인터페이스를 사용하는 이유 >
[ 다중 상속 문제 회피 ] -> Java는 다중 상속을 지원하지 않으므로, Thread 클래스를 상속 받으면 다른 클래스를 상속받을 수 없다.
                       Runnable 인터페이스를 구현하여 다른 클래스를 상속 받으면서도 스레드를 사용할 수 있다.
                       
[ 코드 재사용성 향상 ] -> 스레드 실행 로직을 Runnable 객체로 분리하여 코드 재사용성을 높일 수 있다.
[ 객체 지향적 설계 ] -> Runnable 객체를 독립적으로 관리하고, 재사용할 수 있어 객체 지향적인 프로그래밍을 가능하게 한다.
