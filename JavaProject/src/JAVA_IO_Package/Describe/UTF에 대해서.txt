
UTF( Unicode Transformation Format)이란?

유니코드(Unicode)는 전 세계의 모든 문자를 표현하기 위한 표준 문자 집합이다.
UTF는 유니코드 문자 집합의 문자를 실제로 컴퓨터에 저장하고 전송하기 위한 인코딩 방식이다.
다양한 UTF 방식이 있으며, 각각 다른 특징과 장단점을 가지고 있다.

[ 주요 UTF 인코딩 방식 ]

1. UTF-8:
 ㅇ 가변 길이 인코딩 방식이다.
 ㅇ 각 문자를 1바이트에서 4바이트까지 사용하여 표현한다.
 ㅇ ASCII 문자(영문, 숫자, 특수 문자)는 1바이트로 표현하므로 ASCII 호환성이 좋다.
 ㅇ 한글은 일반적으로 3바이트로 표현된다.
 -> String s = "한"; -> try { System.out.println(s.getBytes("UTF-8").length);} catch(Exception e) { e.printStackTrace() } == 출력 값: 3
 -> String s = "a"; -> try { System.out.println(s.getBytes("UTF-8").length);} catch(Exception e) { e.printStackTrace() } == 출력 값: 1
    
 ㅇ 웹 환경에서 가장 많이 사용되는 인코딩 방식이다.
 ㅇ 장점 : 효율적인 저장 공간 활용, ASCII 호환성, 네트워크 전송에 유리
 ㅇ 단점 : 한글 등 일부 문자는 UTF-16보다 더 많은 바이트를 소모할 수 있음( UTF-8의 경우 "한" == 3Byte, UTF-16의 경우 "한" == 2Byte )
 

2. UTF-16:
 ㅇ 가변 길이 인코딩 방식이다.
 ㅇ 각 문자를 2바이트(기본) 또는 4바이트(보충 문자)로 사용하여 표현
 ㅇ BMP( Basic Multilingual Plane )에 속하는 문자는 2바이트로 보충 문자는 4바이트로 표현된다.
 ㅇ 자바 char 타입과 String 클래스에서 사용하는 인코딩 방식이다. 
 ㅇ 장점 : 대부분의 문자를 2바이트로 표현 가능, 자바에서 기본적으로 사용
 ㅇ 단점 : 저장 공간을 매우 많이 차지함, 실제로 모든 공간이 사용되지 않음
 

3. UTF-32( UCS-4 == Universal Coded Character Set )
 ㅇ 고정 길이 인코딩 방식이다.
 ㅇ 모든 문자를 4바이트로 표현한다.
 ㅇ 장점 : 모든 문자를 동일한 크기로 표현하므로 문자열 처리(인덱싱)가 간단함
 ㅇ 단점 : ASCII 문자나 자주 사용되는 문자를 표현하는 데도 4바이트를 사용하므로 낭비가 심함

[ UTF-32와 UCS-4 참고사항 ]
 ㅇ UTF-32는 유니코드 표준에 정의된 문자 인코딩 방식( UCS-4와 거의 동일한 방식을 가진다. )
 ㅇ UCS-4는 ISO/IEC 10646 표준에 정의된 32비트 문자 인코딩 방식
 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

[ UTF-16BE와 UTF-16LE를 배우기 전 바이트 순서(Byte Order)를 먼저 공부해야 한다. ]
1. 바이트 순서( Byte Order ):
 ㅇ 컴퓨터는 데이터를 메모리에 저장할 때, 여러 바이트로 이루어진 값을 저장하는 순서가 다를 수 있다.
    이를 바이트 순서(ByteOrder) 또는 엔디안(Endian)라고 한다.
 
 ㅇ 빅 엔디안( Big_Endian ): 상위 바이트( Most Significant Byte, MSB)부터 낮은 주소에서부터 저장하는 방식이다.
                          사람이 숫자를 읽는 방식과 동일하다.
                          [ 빅 엔디안 표현 예시 ]
                          메모리 주소	빅 엔디안(정수 == 0x12345678 : 0x = 16진수를 표현하기 위한 접두사)
 						  0x1000	0x12
 						  0x1001	0x34
 						  0x1002	0x56
 						  0x1003	0x78
 						  
 ㅇ 리틀 엔디안( Little_Endian ) : 하위 바이트( Least Significant Byte, MSB)부터 낮은 주소에서부터 저장하는 방식이다.
                          [ 리틀 엔디안 표현 예시 ]        
     					  메모리 주소	리틀 엔디안(정수 == 0x12345678 : 0x = 16진수를 표현하기 위한 접두사)
     					  0x1000	0x78
     					  0x1001	0x56
     					  0x1002	0x34
     					  0x1003	0x12
     					  
2. UTF-16BE ( Big_Endian )
 ㅇ UTF-16 인코딩에서 16비트 코드 단위를 빅 엔디안 방식으로 저장하는 방식이다.
 ㅇ 상위 바이트부터 먼저 주소(낮은)에 저장한다.
 ㅇ BOM : FE FF
 ㅇ 예: 유니코드 문자 U+1234를 UTF-16BE로 저장하면 12 34 순서로 저장된다.
 
3. UTF-16LE ( Little_Endian )
 ㅇ UTF-16 인코딩에서 16비트 코드 단위를 리틀 엔디안 방식으로 저장하는 방식이다.
 ㅇ 하위 바이트부터 먼저 주소(낮은)에 저장한다.
 ㅇ BOM : FF FE
 ㅇ 예: 유니코드 문자 U+1234를 UTF-16LE로 저장하면 34 12 순서로 저장된다.
 
4. BOM( Byte Order Mark )
 ㅇ 텍스트 파일의 시작 부분에 추가되는 특수한 문자(U+FEFF)이다.
 ㅇ BOM은 파일의 인코딩 방식과 바이트 순서를 나타낸다.
 ㅇ UTF-16BE 파일은 BOM으로 FE FF를 사용한다.
 ㅇ UTF-16LE 파일은 BOM으로 FF FE를 사용한다.
 ㅇ BOM이 있으면 파일을 읽는 프로그램이 인코딩 방식과 바이트 순서를 자동으로 감지할 수 있다.
 
5. BOM 유무에 따른 처리
 ㅇ BOM이 있는 경우: 파일의 인코딩 방식과 바이트 순서를 BOM을 통해 명확하게 알 수 있다.
 ㅇ BOM이 없는 경우: 파일을 읽는 프로그램은 인코딩 방식과 바이트 순서를 에디터(Editor)가 추정해야 한다. 
                  이 경우 잘못된 방식으로 해석될 가능성이 있다.