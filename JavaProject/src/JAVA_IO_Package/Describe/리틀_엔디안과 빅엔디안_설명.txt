리틀 엔디안(Little_Endian)과 빅 엔디안(Big_Endian)

에디안(Endian)이란?
ㅇ 엔디안은 컴퓨터 메모리에 여러 바이트로 이루어진 데이터(예: 정수, 부동 소수점)를 저장하는 방식을 나타낸다.
   크게 두 가지 방식이 존재한다.

ㅇ 자바에서 엔디안은 네트워크 통신에서 중요한 역할을 한다. 파일을 서버에서 내려받을 때, 엔디안은 주로 다음과 같은 방식으로 사용된다.
1. 네트워크 바이트 순서(Network Byte Order)
   - TCP/IP 프로토콜은 데이터를 전송할 때 빅 엔디안(Big-Endian)방식을 사용하도록 정의(표준)되어 있다.
     이를 "네트워크 바이트 순서"라고 한다.
   
   - 서버와 클라이언트가 서로 다른 엔디안 방식을 사용할 경우, 데이터를 주고 받기 전에 반드시 네트워크 바이트 순서로 변환해야 한다.
     
2. 파일 다운로드 과정에서의 엔디안 처리
   - 서버
     > 서버는 파일을 읽어 메모리에 저장한다.
     > 파일의 내용 중 숫자로 표현된 데이터(예: 파일의 크기, 이미지의 가로/세로 길이 등)가 있다면, 해당 데이터를 빅 엔디안(표준)으로 변환한다.
     > 변환된 데이터를 네트워크를 통해 클라이언트로 전송한다.
     
   - 클라이언트
     > 클라이언트는 서버로부터 데이터를 수신한다.
     > 수신된 데이터 중 숫자로 표현된 데이터가 있다면, 해당 데이터를 자신의 시스템 엔디안 방식으로 변환한다.
     > 변환된 데이터를 사용하여 파일을 저장하거나 처리한다.
   
   
빅 엔디안(Big_Endian)
ㅇ 가장 중요한 바이트(Most Significant Byte, MSB)를 가장 낮은 주소에 저장한다.
ㅇ 사람이 숫자를 읽는 방식처럼 순서대로 읽는다.
ㅇ 예 0x12345678을 메모리에 저장할 때, 12 34 56 78 순서로 저장된다.

리틀 에디안(Little_Endian)
ㅇ 가장 덜 중요한 바이트(Least Significant Byte, LSB)를 가장 낮은 주소에 저장한다.
ㅇ 예 0x12345678을 메모리에 저장할 때, 78 56 34 12 순서로 저장된다.

> 리틀 엔디안과 빅 엔디안 바이트를 문자로 변환할 때, CharacterSet( UTF-8, UTF-16... 등과 함께 인코딩과 디코딩 작업의 필요한 요소이다. )


실제 헥사코드로 표현을 해보면 byte -> hex로 변환 하는 작업을 수행 시, 
빅 에디안의 경우  ["가"]를 출력 결과 => [FEFF(에디안 표현) ac00]로 표현이 된다. ( 빅 에디안의 경우, input으로 들어온 데이터의 byte 순서를 정방향으로 읽는다. )
리틀 에디안의 경우 ["가"]를 출력 결과 => [FFFE(에디안 표현) 00ac]로 표현이 되며 ( 리틀 에디안의 경우, input으로 들어온 데이터의 byte 순서를 역방향으로 읽는다. )

System.out.println("가".getBytes("UTF-16BE")); // BE : Big_Endian 표현 
System.out.println("가".getBytes("UTF-16LE")); // LE : Little_Endian 표현

과거 PC의 CPU 아키텍처의 경우는 리틀 에디안 유형의 역방향으로 읽는 처리속도가 빨라서 리틀 에디안 유형으로 데이터를 통신했지만,
요즘 PC의 CPU 아키텍처의 경우는 빅 에디안 유형의 정방향으로 읽는 처리속도가 빠르기 때문에 빅 에디안으로 데이터 통신을 한다.
그렇지만, 오늘날 현재의 PC에서는 대부분의 운영체제와 CPU가 다양한 엔디안을 지원을해서 걱정이 없다.

그런다음 엔디안이 없는 경우는 에디터(Editor)가 들어오는 데이터의 바이트의 패턴을 추측해서 빅 엔디안 또는 리틀 엔디안으로 해석할 수 있다.
하지만, 이 경우는 정확히 100% 알맞게 해석하는 것이 아닌 잘못된 방식으로 해석될 가능성도 있다. ( 추측률 99.5%의 정확도를 가진다. )

ㅇ 자바의 char 타입은 UTF-16 인코딩을 사용한다.
ㅇ 자바 String 클래스도 내부적으로 UTF-16을 사용한다.
ㅇ 시스템의 기본 문자 인코딩은 java.nio.charset.Charset 클래스를 통해 관리되며,
   JVM 설정에 따라 다를 수 있다.







