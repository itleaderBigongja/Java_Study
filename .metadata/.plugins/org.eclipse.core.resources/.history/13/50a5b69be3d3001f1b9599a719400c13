package thread_5;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/** CachedThreadPool을 이용하여 DB SELECT, DB INSERT, DB UPDATE 작업을 수행하고,
 *  작업을 순차적으로 진행하려면, 각 작업이 완료된 후에 다음 작업을 시작하도록 스레드의 실행 흐름을 제어해야 합니다.
 *  이를 구현하려면 Future 객체를 활용하여 작업의 결과를 기다린 후 다음 작업을 실행하면 됩니다.
 * */
public class ExecutorServiceExample_5 {

	public static void main(String[] args) {
		
		// CachedThreadPool 생성
		ExecutorService executor = Executors.newCachedThreadPool();
		
		try {
			// DB SELECT 작업
			Callable<String> selectTask = () -> {
				System.out.println("SELECT 조회를 하기 위한 영역... 호출!");
				return "SELECT 작업 결과 반환";
			};
			
			// DB INSERT 작업
			Callable<String> insertTask = () -> {
				System.out.println("INSERT 작업을 하기 위한 영역... 호출!");
				return "INSERT 작업 결과 반환";
			};
			
			// DB UPDATE 작업
			Callable<String> updateTask = () -> {
				System.out.println("UPDATE 작업 결과 반환");
				return "UPDATE 작업 결과 반환";
			};
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			System.out.println("스레드 작업을 종료합니다.");
			executor.shutdown();
		}
	}
}
