package thread_4;

// 스레드 대기 
public class ThreadSync_6 {

	public static void main(String[] args) {
		SharedResource resource = new SharedResource();
		Thread producer = new Thread(()-> {
			try {
				resource.produce();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		});
		
		// resource(SharedResource)객체의 consume 메서드 참조
		Thread consumer = new Thread(resource::consume);
//		Thread consumer2 = new Thread(() -> {
//			resource.consume();
//		});
		producer.start();
		producer2.start();
		consumer.start();
	}
}

class SharedResource {
	
	public synchronized void produce() throws InterruptedException{
		System.out.println("Producing...");
		wait();	// Thread 대기상태로 진입
		System.out.println("Resumed production.");
	}
	
	public synchronized void produce2() throws InterruptedException{
		System.out.println("Producing...");
		wait();	// Thread 대기상태로 진입
		System.out.println("Resumed production.");
	}
	
	public synchronized void consume() {
		System.out.println("Consuming...");
		notify(); // 대기 상태인 Thread를 깨움
	}
}